# vim: ft=gitconfig
[include]
  path = user

[include]
  path = github

[include]
  path = maintenance

[init]
  defaultBranch = main

[color]
  status = auto
  branch = auto
  log = auto
  commit = auto
  diff = auto
  interactive = auto
  ui = true
  pager = true

[color "branch"]
  current = yellow
  local = green
  remote = cyan

[color "diff"]
  meta = yellow
  frag = cyan
  old = red
  new = green

[color "status"]
  added = green
  changed = yellow
  untracked = blue

[core]
  pager = delta
  whitespace=fix,-indent-with-non-tab,trailing-space,space-before-tab,cr-at-eol
  hooksPath = ~/.config/git/hooks/
  attributesfile = ~/.config/git/attributes

[commit]
  template = ~/.config/git/message

[delta]
  navigate = true
  features = line-numbers decorations navigate
  dark = true
  true-color = always

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none

[diff]
  ignoreSubmodules = dirty
  compactionHeuristic = true
  colorMoved = default

[alias]
  a = add
  aa = add --all
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t=> \\2/' | sort
  amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend
  b = branch --format='%(align:1,middle)%(color: white)%(HEAD)%(end) %(if)%(upstream)%(then)%(color:green)%(refname:short)%(else)%(if:notequals="refs/heads")%(refname:rstrip=-2)%(then)%(color:cyan)%(refname:lstrip=2)%(else)%(color:yellow)%(refname:lstrip=2) %(color:red)[no upstream]%(end)%(end)%(if)%(symref)%(then)%(color: reset) -> %(symref)%(end) %(color:yellow)%(upstream:track)'
  bdg = !git b | rg gone | cut -f3 -d' ' | xargs git branch -D
  bl = branch --format='%(align:1,middle)%(color: white)%(HEAD)%(end)%(color:yellow) %(objectname:short) %(align:18,left)%(color:blue)%(committername)%(end)%(align:15,middle)%(color:green)%(committerdate:short)%(end)%(if)%(upstream)%(then)%(color:green)%(refname:short)%(else)%(if:notequals="refs/heads")%(refname:rstrip=-2)%(then)%(color:cyan)%(refname:lstrip=2)%(else)%(color:yellow)%(refname:lstrip=2) %(color:red)[no upstream]%(end)%(end)%(if)%(symref)%(then)%(color: reset) -> %(symref)%(end) %(color:yellow)%(upstream:track)'
  bs = bisect
  cc = "!git code-changes"
  ccf = "!git cf | wc -l"
  cf = "!git ss | grep '^U.\\|^.U' --color"
  ci = x --trailer="change:ci"
  cnf = x --trailer="change:config"
  co = checkout
  code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10"
  cp = cherry-pick
  d = diff
  deps = x --trailer="change:deps"
  docs = x --trailer="change:docs"
  ds = diff --staged
  f = feature
  feat = feature
  feature = x --trailer="change:feature"
  fix = x --trailer="change:fix"
  ignore = "!i() { touch .gitignore && echo $1 >> .gitignore; }; i"
  l = log
  last = log -1 HEAD
  lg = log --graph --date=auto:relative --pretty=format:'%C(yellow)%h %Cblue%aN %Cgreen%ad %Creset%s%Cred%d%Creset'
  ls = log --stat
  m = switch main
  pf = push --force-with-lease
  pl = pull --rebase --prune
  px = push
  r = rebase
  rbm = rebase main
  rc = rebase --continue
  rebuild-branch = "!r() { git switch -c $3 && git rev-list -m --first-parent --no-merges $1~1..$2 --reverse | git cherry-pick --stdin; }; r"
  refact = refactor
  refactor = x --trailer="change:refactor"
  revert-pr = "!r() { git switch -c revert-$1 && git revert -m1 $2; }; r"
  rt = restore
  s = show
  sf = "!s() { git show $1:$2 ; }; s"
  shame = "!s() { git blame $1 -p | grep 'author ' | cut -d' ' -f2-10 | sort | uniq -c | sort | tail -n1 | cut -c6-30 ; }; s"
  shout = "!s() { git shame $1 | say; }; s"
  ss = status -s
  st = status
  stash = stash --all
  style = x --trailer="change:style"
  sw = switch
  test = x --trailer="change:test"
  u = unstage
  unstage = restore --staged
  up = !git m && git pl && git sw - && git rbm
  w = log --name-status #short whatchanged
  x  = commit
  # Show commits for work item grouped by change-type
  work-item-summary = "!f() { \
    echo \"Commits for Work-item-id: $1 grouped by Change-type:\"; \
    echo \"================================================================\"; \
    \
    for type in feature fix refactor docs style test ci deps config chore; do \
      commits=$(git log --grep=\"Work-item-id: $1\" --grep=\"Change-type: $type\" --all-match --format=\"%h %s\" 2>/dev/null); \
      if [ -n \"$commits\" ]; then \
        echo; \
        echo \"[$type]\"; \
        echo \"$commits\"; \
      fi; \
    done; \
  }; f"
  wis = work-item-summary
  # List work item with change-type
  work-item-list = "!f() { git log --grep=\"Work-item-id: $1\" --format=\"%C(yellow)%h%C(reset) %s %C(green)[%(trailers:key=Change-type,valueonly,separator=)]%C(reset)\"; }; f"
  wil = work-item-list
  xa = x -a
  xc = x -F .git/COMMIT_EDITMSG --cleanup=strip
  xcn = xc -F .git/COMMIT_EDITMSG --cleanup=strip -n
  xm = x -m

[push]
  default = simple
  autoSetupRemote = true
  recurseSubmodule = on-demand

[pull]
  rebase = true

[branch]
  autoSetupRebase = always
  sort = -committerdate

[tag]
  sort = version:refname

[status]
  submoduleSummary = 1

[submodule]
  recurse = true

[rebase]
  updateRefs = true
  autoSquash = true

[merge]
  conflictstyle = diff3

[interactive]
  diffFilter = delta --color-only

[rerere]
  enabled = true

[fetch]
  writeCommitGraph = true

[trailer "work-item"]
  key = Work-item-id
  ifexists = replace
  where = start

[trailer "change"]
  key = Change-type
  ifexists = replace
  where = start
